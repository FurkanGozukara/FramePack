bucket_options = {
    "640": [
        [416, 960], [448, 864], [480, 832], [512, 768], [544, 704],
        [576, 672], [608, 640], [640, 608], [672, 576], [704, 544],
        [768, 512], [832, 480], [864, 448], [960, 416]
    ],
    "720": [
        [480, 1088], [512, 960], [544, 928], [576, 864], [608, 800],
        [640, 768], [672, 736], [736, 672], [768, 640], [800, 608],
        [864, 576], [928, 544], [960, 512], [1088, 480]
    ],
    "480": [
        [320, 736], [352, 640], [384, 576], [416, 544], [448, 480],
        [448, 512], [480, 448], [512, 448], [544, 416], [576, 384],
        [640, 352], [736, 320]
    ],
    "320": [
        [224, 448], [224, 480], [256, 384], [256, 416], [288, 352],
        [320, 320], [352, 288], [384, 256], [416, 256], [448, 224],
        [480, 224]
    ],
    "240": [
        [160, 320], [160, 352], [192, 256], [192, 288], [192, 320],
        [224, 256], [256, 192], [256, 224], [288, 192], [320, 160],
        [320, 192], [352, 160]
    ]
}


def find_nearest_bucket(h, w, resolution=640):
    min_metric = float('inf')
    best_bucket = None
    for (bucket_h, bucket_w) in bucket_options[resolution]:
        metric = abs(h * bucket_w - w * bucket_h)
        if metric <= min_metric:
            min_metric = metric
            best_bucket = (bucket_h, bucket_w)
    print(f"Found best resolution bucket {bucket_w} x {bucket_h}")       
    return best_bucket

